/* tslint:disable */
/* eslint-disable */
/**
 * Arke IAM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DateAttr } from './DateAttr';
import {
    DateAttrFromJSON,
    DateAttrFromJSONTyped,
    DateAttrToJSON,
} from './DateAttr';
import type { TenantSettings } from './TenantSettings';
import {
    TenantSettingsFromJSON,
    TenantSettingsFromJSONTyped,
    TenantSettingsToJSON,
} from './TenantSettings';

/**
 * 
 * @export
 * @interface TenantDetails
 */
export interface TenantDetails {
    /**
     * 
     * @type {DateAttr}
     * @memberof TenantDetails
     */
    created?: DateAttr;
    /**
     * 
     * @type {DateAttr}
     * @memberof TenantDetails
     */
    updated?: DateAttr;
    /**
     * 
     * @type {number}
     * @memberof TenantDetails
     */
    version: number;
    /**
     * 
     * @type {boolean}
     * @memberof TenantDetails
     */
    archived?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TenantDetails
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDetails
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDetails
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDetails
     */
    vanity: string;
    /**
     * 
     * @type {boolean}
     * @memberof TenantDetails
     */
    enabled: boolean;
    /**
     * 
     * @type {TenantSettings}
     * @memberof TenantDetails
     */
    settings?: TenantSettings;
}

/**
 * Check if a given object implements the TenantDetails interface.
 */
export function instanceOfTenantDetails(value: object): value is TenantDetails {
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('vanity' in value) || value['vanity'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    return true;
}

export function TenantDetailsFromJSON(json: any): TenantDetails {
    return TenantDetailsFromJSONTyped(json, false);
}

export function TenantDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TenantDetails {
    if (json == null) {
        return json;
    }
    return {
        
        'created': json['created'] == null ? undefined : DateAttrFromJSON(json['created']),
        'updated': json['updated'] == null ? undefined : DateAttrFromJSON(json['updated']),
        'version': json['version'],
        'archived': json['archived'] == null ? undefined : json['archived'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'],
        'vanity': json['vanity'],
        'enabled': json['enabled'],
        'settings': json['settings'] == null ? undefined : TenantSettingsFromJSON(json['settings']),
    };
}

export function TenantDetailsToJSON(value?: TenantDetails | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'created': DateAttrToJSON(value['created']),
        'updated': DateAttrToJSON(value['updated']),
        'version': value['version'],
        'archived': value['archived'],
        'notes': value['notes'],
        'id': value['id'],
        'name': value['name'],
        'vanity': value['vanity'],
        'enabled': value['enabled'],
        'settings': TenantSettingsToJSON(value['settings']),
    };
}

