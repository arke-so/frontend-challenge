/* tslint:disable */
/* eslint-disable */
/**
 * Arke Supply API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CountersDetails,
  Settings,
  Webhook,
} from '../models/index';
import {
    CountersDetailsFromJSON,
    CountersDetailsToJSON,
    SettingsFromJSON,
    SettingsToJSON,
    WebhookFromJSON,
    WebhookToJSON,
} from '../models/index';

export interface CreateWebhookRequest {
    webhook?: Webhook;
}

export interface DeleteWebHookRequest {
    webHookId: string;
}

export interface ShowWebHookRequest {
    webHookId: string;
}

export interface UpdateCountersRequest {
    countersDetails?: CountersDetails;
}

export interface UpdateSettingsRequest {
    settings?: Settings;
}

export interface UpdateWebHookRequest {
    webHookId: string;
    webhook?: Webhook;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     */
    async createWebhookRaw(requestParameters: CreateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/settings/webhook`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookToJSON(requestParameters['webhook']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     */
    async createWebhook(requestParameters: CreateWebhookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.createWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteWebHookRaw(requestParameters: DeleteWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['webHookId'] == null) {
            throw new runtime.RequiredError(
                'webHookId',
                'Required parameter "webHookId" was null or undefined when calling deleteWebHook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings/webhook/{webHookId}`.replace(`{${"webHookId"}}`, encodeURIComponent(String(requestParameters['webHookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWebHook(requestParameters: DeleteWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebHookRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listCountersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountersDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings/counter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountersDetailsFromJSON(jsonValue));
    }

    /**
     */
    async listCounters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountersDetails> {
        const response = await this.listCountersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listWebHooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Webhook>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings/webhook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebhookFromJSON));
    }

    /**
     */
    async listWebHooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Webhook>> {
        const response = await this.listWebHooksRaw(initOverrides);
        return await response.value();
    }

    /**
     * shows the Supply-specific settings for the current tenant
     */
    async showSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     * shows the Supply-specific settings for the current tenant
     */
    async showSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settings> {
        const response = await this.showSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async showWebHookRaw(requestParameters: ShowWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['webHookId'] == null) {
            throw new runtime.RequiredError(
                'webHookId',
                'Required parameter "webHookId" was null or undefined when calling showWebHook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings/webhook/{webHookId}`.replace(`{${"webHookId"}}`, encodeURIComponent(String(requestParameters['webHookId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     */
    async showWebHook(requestParameters: ShowWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.showWebHookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCountersRaw(requestParameters: UpdateCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountersDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/settings/counter`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CountersDetailsToJSON(requestParameters['countersDetails']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountersDetailsFromJSON(jsonValue));
    }

    /**
     */
    async updateCounters(requestParameters: UpdateCountersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountersDetails> {
        const response = await this.updateCountersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates the Supply-specific settings for the current tenant
     */
    async updateSettingsRaw(requestParameters: UpdateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/settings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsToJSON(requestParameters['settings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     * updates the Supply-specific settings for the current tenant
     */
    async updateSettings(requestParameters: UpdateSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settings> {
        const response = await this.updateSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWebHookRaw(requestParameters: UpdateWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['webHookId'] == null) {
            throw new runtime.RequiredError(
                'webHookId',
                'Required parameter "webHookId" was null or undefined when calling updateWebHook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/settings/webhook/{webHookId}`.replace(`{${"webHookId"}}`, encodeURIComponent(String(requestParameters['webHookId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookToJSON(requestParameters['webhook']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     */
    async updateWebHook(requestParameters: UpdateWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.updateWebHookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
