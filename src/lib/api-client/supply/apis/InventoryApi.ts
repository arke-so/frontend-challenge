/* tslint:disable */
/* eslint-disable */
/**
 * Arke Supply API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RawMaterialInventoryEventSummary,
  RawMaterialInventoryItemDetails,
  RawMaterialInventoryItemSummary,
} from '../models/index';
import {
    RawMaterialInventoryEventSummaryFromJSON,
    RawMaterialInventoryEventSummaryToJSON,
    RawMaterialInventoryItemDetailsFromJSON,
    RawMaterialInventoryItemDetailsToJSON,
    RawMaterialInventoryItemSummaryFromJSON,
    RawMaterialInventoryItemSummaryToJSON,
} from '../models/index';

export interface CreateRawMaterialInventoryItemRequest {
    rawMaterialInventoryItemDetails?: RawMaterialInventoryItemDetails;
}

export interface GetRawMaterialInventoryItemRequest {
    rawMaterialInventoryItemId: string;
}

export interface ListRawMaterialInventoryEventsRequest {
    limit?: number;
    offset?: number;
    search?: string;
}

export interface ListRawMaterialInventoryItemsRequest {
    limit?: number;
    offset?: number;
    search?: string;
}

export interface ListRawMaterialInventoryItemsByRawMaterialRequest {
    rawMaterialId: string;
    limit?: number;
    offset?: number;
    search?: string;
}

/**
 * 
 */
export class InventoryApi extends runtime.BaseAPI {

    /**
     * creates a raw material item in the inventory
     */
    async createRawMaterialInventoryItemRaw(requestParameters: CreateRawMaterialInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawMaterialInventoryItemDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inventory/raw-material`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RawMaterialInventoryItemDetailsToJSON(requestParameters['rawMaterialInventoryItemDetails']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RawMaterialInventoryItemDetailsFromJSON(jsonValue));
    }

    /**
     * creates a raw material item in the inventory
     */
    async createRawMaterialInventoryItem(requestParameters: CreateRawMaterialInventoryItemRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawMaterialInventoryItemDetails> {
        const response = await this.createRawMaterialInventoryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * shows an inventory item
     */
    async getRawMaterialInventoryItemRaw(requestParameters: GetRawMaterialInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawMaterialInventoryItemDetails>> {
        if (requestParameters['rawMaterialInventoryItemId'] == null) {
            throw new runtime.RequiredError(
                'rawMaterialInventoryItemId',
                'Required parameter "rawMaterialInventoryItemId" was null or undefined when calling getRawMaterialInventoryItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inventory/raw-material/{rawMaterialInventoryItemId}`.replace(`{${"rawMaterialInventoryItemId"}}`, encodeURIComponent(String(requestParameters['rawMaterialInventoryItemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RawMaterialInventoryItemDetailsFromJSON(jsonValue));
    }

    /**
     * shows an inventory item
     */
    async getRawMaterialInventoryItem(requestParameters: GetRawMaterialInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawMaterialInventoryItemDetails> {
        const response = await this.getRawMaterialInventoryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lists the inventory events
     */
    async listRawMaterialInventoryEventsRaw(requestParameters: ListRawMaterialInventoryEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RawMaterialInventoryEventSummary>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inventory/raw-material/event`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RawMaterialInventoryEventSummaryFromJSON));
    }

    /**
     * lists the inventory events
     */
    async listRawMaterialInventoryEvents(requestParameters: ListRawMaterialInventoryEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RawMaterialInventoryEventSummary>> {
        const response = await this.listRawMaterialInventoryEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lists the raw materials inventory
     */
    async listRawMaterialInventoryItemsRaw(requestParameters: ListRawMaterialInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RawMaterialInventoryItemSummary>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inventory/raw-material`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RawMaterialInventoryItemSummaryFromJSON));
    }

    /**
     * lists the raw materials inventory
     */
    async listRawMaterialInventoryItems(requestParameters: ListRawMaterialInventoryItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RawMaterialInventoryItemSummary>> {
        const response = await this.listRawMaterialInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * shows the inventory for a given raw material
     */
    async listRawMaterialInventoryItemsByRawMaterialRaw(requestParameters: ListRawMaterialInventoryItemsByRawMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RawMaterialInventoryItemSummary>>> {
        if (requestParameters['rawMaterialId'] == null) {
            throw new runtime.RequiredError(
                'rawMaterialId',
                'Required parameter "rawMaterialId" was null or undefined when calling listRawMaterialInventoryItemsByRawMaterial().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/raw-material/{rawMaterialId}/inventory`.replace(`{${"rawMaterialId"}}`, encodeURIComponent(String(requestParameters['rawMaterialId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RawMaterialInventoryItemSummaryFromJSON));
    }

    /**
     * shows the inventory for a given raw material
     */
    async listRawMaterialInventoryItemsByRawMaterial(requestParameters: ListRawMaterialInventoryItemsByRawMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RawMaterialInventoryItemSummary>> {
        const response = await this.listRawMaterialInventoryItemsByRawMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
