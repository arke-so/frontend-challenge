/* tslint:disable */
/* eslint-disable */
/**
 * Arke Supply API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TransportDocumentDetails,
  TransportDocumentExtract,
  TransportDocumentSummary,
  Upload,
} from '../models/index';
import {
    TransportDocumentDetailsFromJSON,
    TransportDocumentDetailsToJSON,
    TransportDocumentExtractFromJSON,
    TransportDocumentExtractToJSON,
    TransportDocumentSummaryFromJSON,
    TransportDocumentSummaryToJSON,
    UploadFromJSON,
    UploadToJSON,
} from '../models/index';

export interface AcceptTransportDocumentRequest {
    transportDocumentId: string;
}

export interface CreateTransportDocumentRequest {
    transportDocumentDetails?: TransportDocumentDetails;
}

export interface ExtractTransportDocumentRequest {
    upload?: Upload;
}

export interface ListTransportDocumentsRequest {
    limit?: number;
    offset?: number;
    search?: string;
    orderId?: string;
}

export interface ShowTransportDocumentRequest {
    transportDocumentId: string;
}

export interface UpdateTransportDocumentRequest {
    transportDocumentId: string;
    transportDocumentDetails?: TransportDocumentDetails;
}

/**
 * 
 */
export class TransportDocumentsApi extends runtime.BaseAPI {

    /**
     * Flags a transport document as accepted. Additionally it kicks off a workflow that moves inventory items from inbound to \"in stock\" and an event is generated.
     * flags a transport document as accepted
     */
    async acceptTransportDocumentRaw(requestParameters: AcceptTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportDocumentDetails>> {
        if (requestParameters['transportDocumentId'] == null) {
            throw new runtime.RequiredError(
                'transportDocumentId',
                'Required parameter "transportDocumentId" was null or undefined when calling acceptTransportDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transport-document/{transportDocumentId}/_accept`.replace(`{${"transportDocumentId"}}`, encodeURIComponent(String(requestParameters['transportDocumentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportDocumentDetailsFromJSON(jsonValue));
    }

    /**
     * Flags a transport document as accepted. Additionally it kicks off a workflow that moves inventory items from inbound to \"in stock\" and an event is generated.
     * flags a transport document as accepted
     */
    async acceptTransportDocument(requestParameters: AcceptTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportDocumentDetails> {
        const response = await this.acceptTransportDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creates a transport document
     */
    async createTransportDocumentRaw(requestParameters: CreateTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportDocumentSummary>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transport-document`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransportDocumentDetailsToJSON(requestParameters['transportDocumentDetails']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportDocumentSummaryFromJSON(jsonValue));
    }

    /**
     * creates a transport document
     */
    async createTransportDocument(requestParameters: CreateTransportDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportDocumentSummary> {
        const response = await this.createTransportDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async extractTransportDocumentRaw(requestParameters: ExtractTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportDocumentExtract>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transport-document/_extract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadToJSON(requestParameters['upload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportDocumentExtractFromJSON(jsonValue));
    }

    /**
     */
    async extractTransportDocument(requestParameters: ExtractTransportDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportDocumentExtract> {
        const response = await this.extractTransportDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lists the transport documents
     */
    async listTransportDocumentsRaw(requestParameters: ListTransportDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransportDocumentSummary>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['orderId'] != null) {
            queryParameters['order_id'] = requestParameters['orderId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transport-document`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransportDocumentSummaryFromJSON));
    }

    /**
     * lists the transport documents
     */
    async listTransportDocuments(requestParameters: ListTransportDocumentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransportDocumentSummary>> {
        const response = await this.listTransportDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * shows a transport document
     */
    async showTransportDocumentRaw(requestParameters: ShowTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportDocumentDetails>> {
        if (requestParameters['transportDocumentId'] == null) {
            throw new runtime.RequiredError(
                'transportDocumentId',
                'Required parameter "transportDocumentId" was null or undefined when calling showTransportDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transport-document/{transportDocumentId}`.replace(`{${"transportDocumentId"}}`, encodeURIComponent(String(requestParameters['transportDocumentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportDocumentDetailsFromJSON(jsonValue));
    }

    /**
     * shows a transport document
     */
    async showTransportDocument(requestParameters: ShowTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportDocumentDetails> {
        const response = await this.showTransportDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates a transport document
     */
    async updateTransportDocumentRaw(requestParameters: UpdateTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportDocumentDetails>> {
        if (requestParameters['transportDocumentId'] == null) {
            throw new runtime.RequiredError(
                'transportDocumentId',
                'Required parameter "transportDocumentId" was null or undefined when calling updateTransportDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transport-document/{transportDocumentId}`.replace(`{${"transportDocumentId"}}`, encodeURIComponent(String(requestParameters['transportDocumentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransportDocumentDetailsToJSON(requestParameters['transportDocumentDetails']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportDocumentDetailsFromJSON(jsonValue));
    }

    /**
     * updates a transport document
     */
    async updateTransportDocument(requestParameters: UpdateTransportDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportDocumentDetails> {
        const response = await this.updateTransportDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
