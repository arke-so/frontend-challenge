/* tslint:disable */
/* eslint-disable */
/**
 * Arke Supply API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PricesDealsInner } from './PricesDealsInner';
import {
    PricesDealsInnerFromJSON,
    PricesDealsInnerFromJSONTyped,
    PricesDealsInnerToJSON,
} from './PricesDealsInner';

/**
 * 
 * @export
 * @interface Prices
 */
export interface Prices {
    /**
     * 
     * @type {string}
     * @memberof Prices
     */
    currency: PricesCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof Prices
     */
    unit: number;
    /**
     * 
     * @type {Array<PricesDealsInner>}
     * @memberof Prices
     */
    deals?: Array<PricesDealsInner>;
}


/**
 * @export
 */
export const PricesCurrencyEnum = {
    Eur: 'EUR',
    Usd: 'USD',
    Gbp: 'GBP'
} as const;
export type PricesCurrencyEnum = typeof PricesCurrencyEnum[keyof typeof PricesCurrencyEnum];


/**
 * Check if a given object implements the Prices interface.
 */
export function instanceOfPrices(value: object): value is Prices {
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('unit' in value) || value['unit'] === undefined) return false;
    return true;
}

export function PricesFromJSON(json: any): Prices {
    return PricesFromJSONTyped(json, false);
}

export function PricesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Prices {
    if (json == null) {
        return json;
    }
    return {
        
        'currency': json['currency'],
        'unit': json['unit'],
        'deals': json['deals'] == null ? undefined : ((json['deals'] as Array<any>).map(PricesDealsInnerFromJSON)),
    };
}

export function PricesToJSON(value?: Prices | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'currency': value['currency'],
        'unit': value['unit'],
        'deals': value['deals'] == null ? undefined : ((value['deals'] as Array<any>).map(PricesDealsInnerToJSON)),
    };
}

